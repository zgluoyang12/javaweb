<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="myRealm" class="com.application.system.shiro.LoginRealm"></bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <property name="realms">
	    	<list>
	    		 <ref bean="myRealm"/>
	    	</list>
	    </property>
	</bean>
<!-- 	<bean id="authenFilter" class="com.application.shiro.AuthenFilter"></bean> -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/system/admin"/>
	    <property name="successUrl" value="/system/login/adminMain"/>
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
<!-- 	   <property name="filters"> -->
<!-- 	        <util:map> -->
<!-- 	            <entry key="anAlias" value-ref="authenFilter"/> -->
<!-- 	        </util:map> -->
<!-- 	    </property>  -->
	    <property name="filterChainDefinitions">
	        <value>
				/public/**=anon
				/system/admin/login=anon
				/system/**=authc
	        </value>
	    </property>
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>